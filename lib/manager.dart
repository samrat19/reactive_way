// import 'package:equatable/equatable.dart';
// import 'package:flutter/cupertino.dart';
// import 'package:flutter_bloc/flutter_bloc.dart';
// import 'package:weather_bloc/model.dart';
// import 'package:weather_bloc/service.dart';
//
// class Manager extends Bloc<Event,DataState>{
//
//   Service service;
//
//   Manager({DataState initialState, @required this.service}) : super(initialState);
//
//   @override
//   Stream<DataState> mapEventToState(Event event) async*{
//     if(event is GetData) {
//       yield LoadingState();
//       try {
//         Autogenerated articles = await service.getData();
//         yield HaveData(data: articles);
//       } catch (e) {
//         yield HaveError(message: e.toString());
//       }
//     }
//   }
// }
//
// abstract class Event extends Equatable{
//
// }
//
// class GetData extends Event{
//   @override
//   // TODO: implement props
//   List<Object> get props => null;
//
// }
//
// abstract class DataState extends Equatable{}
//
// class InitialState extends DataState{
//   @override
//   List<Object> get props => [];
//
// }
//
// class LoadingState extends DataState{
//   @override
//   List<Object> get props => [];
//
// }
//
// class HaveData extends DataState{
//
//   final Autogenerated data;
//
//   HaveData({ @required this.data});
//
//   @override
//   List<Object> get props => data.articles;
//
// }
//
// class HaveError extends DataState{
//
//   final String message;
//
//   HaveError({@required this.message});
//
//   @override
//   List<Object> get props => [message];
//
// }
//
//
//
//

import 'package:flutter_command/flutter_command.dart';
import 'package:get_it/get_it.dart';
import 'package:reactive_way/model.dart';
import 'package:reactive_way/service.dart';

class Manager {
  Command<void, List<Articles>>? loadData;

  Manager() {
    loadData = Command.createAsyncNoParam<List<Articles>>(() => GetIt.I<Service>().getData(), []);
    loadData!.execute();
  }
}

